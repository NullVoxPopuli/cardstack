type Account @entity {
  id: ID!                                          # address
  safes: [SafeOwner]!                              @derivedFrom(field: "owner")
  sentTokens: [TokenTransfer]!                     @derivedFrom(field: "from")
  receivedTokens: [TokenTransfer]!                 @derivedFrom(field: "to")
  depots: [Depot]!                                 @derivedFrom(field: "supplier")
  receivedBridgedTokens: [BridgeEvent]!            @derivedFrom(field: "supplier")
  supplierInfoDIDUpdates: [SupplierInfoDIDUpdate]! @derivedFrom(field: "supplier")
  createdPrepaidCards: [PrepaidCardCreation]!      @derivedFrom(field: "issuer")
  createdMerchants: [MerchantCreation]!            @derivedFrom(field: "merchant")
}

type Depot @entity {
  id: ID!                                          # safe address
  safe: Safe!
  createdAt: BigInt!
  supplier: Account!
  infoDid: String
  receivedBridgedTokens: [BridgeEvent]!            @derivedFrom(field: "depot")
}

type PrepaidCard @entity {
  id: ID!                         # safe address
  safe: Safe!
  customizationDID: String
  issuingToken: String!
  issuer: Account!
  owner: Account!
  reloadable: Boolean!
  creation: PrepaidCardCreation   @derivedFrom(field: "prepaidCard")
}

type MerchantSafe @entity {
  id: ID!                         # safe address
  safe: Safe!
  merchant: Account!
  infoDid: String
  creation: MerchantCreation      @derivedFrom(field: "merchantSafe")
}

type BridgeEvent @entity {
  id: ID!
  transaction: Transaction!
  depot: Depot!
  timestamp: BigInt!
  supplier: Account!
  token: String!
  amount: BigInt!
}

type SupplierInfoDIDUpdate @entity {
  id: ID!
  transaction: Transaction!
  infoDID: String!
  timestamp: BigInt!
  supplier: Account!
}

type PrepaidCardCreation @entity {
  id: ID!
  transaction: Transaction!
  createdAt: BigInt!
  prepaidCard: PrepaidCard!
  issuer: Account!
  issuingToken: String!
  issuingTokenAmount: BigInt!
  spendAmount: BigInt!
  creationGasFeeCollected: BigInt!
}

type MerchantCreation @entity {
  id: ID!
  transaction: Transaction!
  createdAt: BigInt!
  merchantSafe: MerchantSafe!
  merchant: Account!
}

type PrepaidCardTransfer @entity {
  id: ID!              # safe.id-from-to-txnhash
  transaction: Transaction!
  from: Account!
  to: Account!
}

type Safe @entity {
  id: ID!                          # safe address
  createdAt: BigInt!               # unix time
  owners: [SafeOwner]!             @derivedFrom(field: "safe")
  sentTokens: [TokenTransfer]!     @derivedFrom(field: "fromSafe")
  receivedTokens: [TokenTransfer]! @derivedFrom(field: "toSafe")
  safeTxns: [SafeTransaction]!     @derivedFrom(field: "safe")
  depot: Depot                     @derivedFrom(field: "safe")
  merchant: MerchantSafe           @derivedFrom(field: "safe")
  prepaidCard: PrepaidCard         @derivedFrom(field: "safe")
}

type SafeTransaction @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  safe: Safe!
  to: String!
  value: BigInt!
  data: Bytes!
  operation: BigInt!
  safeTxGas: BigInt!
  baseGas: BigInt!
  gasPrice: BigInt!
  gasToken: String!
  refundReceiver: String!
  signatures: Bytes!
}

# this is a grouping of all the interior events that happened as part of the
# same transaction
type Transaction @entity {
  id: ID!    # txn hash
  timestamp: BigInt!
  blockNumber: BigInt!
  safeTxns: [SafeTransaction]!                     @derivedFrom(field: "transaction")
  bridgeEvents: [BridgeEvent]!                     @derivedFrom(field: "transaction")
  supplierInfoDIDUpdates: [SupplierInfoDIDUpdate]! @derivedFrom(field: "transaction")
  prepaidCardTransfers: [PrepaidCardTransfer]!     @derivedFrom(field: "transaction")
  tokenTransfers: [TokenTransfer]!                 @derivedFrom(field: "transaction")
}

# A mapping table is the more performant way to represent many-to-many
# relationships
type SafeOwner @entity {
  id: ID!               # Set to safe.id-owner.id
  owner: Account!
  safe: Safe!
}

type TokenTransfer @entity {
  id: ID!              # Set to token address + txn-hash + log index
  transaction: Transaction!
  token: Token!
  amount: BigInt!
  timestamp: BigInt!
  from: Account
  fromSafe: Safe
  to: Account
  toSafe: Safe
}

type Token @entity {
  id: ID!
  transfers: [TokenTransfer]! @derivedFrom(field: "token")
}
