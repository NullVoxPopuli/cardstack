import { writeJSONSync, writeFileSync, readFileSync, removeSync } from 'fs-extra';
import { join, resolve } from 'path';
import { addFilePreamble } from './pre-tsc-build-entrypoint';

import PrepaidCardManagerABI from '../../cardpay-sdk/contracts/abi/latest/prepaid-card-manager';
import BridgeUtilsABI from '../../cardpay-sdk/contracts/abi/latest/bridge-utils';
import RevenuePoolABI from '../../cardpay-sdk/contracts/abi/latest/revenue-pool';
import SpendABI from '../../cardpay-sdk/contracts/abi/latest/spend';
import { getAddressByNetwork } from '@cardstack/cardpay-sdk/contracts/addresses';

const abiDir = resolve(join(__dirname, '..', 'abis'));
const subgraphTemplateFile = resolve(join(__dirname, '..', 'subgraph-template.yaml'));
const subgraphFile = resolve(join(__dirname, '..', 'subgraph.yaml'));

const network = process.argv.slice(2)[0];
if (!network) {
  console.error(`need to specify network`);
  process.exit(1);
}
let cleanNetwork = network.replace('poa-', '');

let abis = {
  PrepaidCardManager: PrepaidCardManagerABI,
  BridgeUtils: BridgeUtilsABI,
  RevenuePool: RevenuePoolABI,
  Spend: SpendABI,
};

for (let [name, abi] of Object.entries(abis)) {
  writeJSONSync(join(abiDir, `${name}.json`), abi);
}

let subgraph = readFileSync(subgraphTemplateFile, { encoding: 'utf8' })
  .replace(/{NETWORK}/g, network)
  .replace(/{PREPAID_CARD_MANAGER_ADDRESS}/g, getAddressByNetwork('prepaidCardManager', cleanNetwork))
  .replace(/{BRIDGE_UTILS_ADDRESS}/g, getAddressByNetwork('bridgeUtils', cleanNetwork))
  .replace(/{HOME_TOKEN_BRIDGE_ADDRESS}/g, getAddressByNetwork('homeBridge', cleanNetwork))
  .replace(/{REVENUE_POOL_ADDRESS}/g, getAddressByNetwork('revenuePool', cleanNetwork))
  .replace(/{SPEND_ADDRESS}/g, getAddressByNetwork('spend', cleanNetwork));
removeSync(subgraphFile);
writeFileSync(subgraphFile, subgraph);

addFilePreamble(
  subgraphFile,
  `### This is an auto generated file, please do not edit this file ###
`
);
