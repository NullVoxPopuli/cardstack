{{!-- template-lint-disable no-inline-styles --}}
<Freestyle::Usage @name="CardContainer">
  <:description>
    A wrapper container for a card. 
  </:description>
  <:example>
    <Boxel::CardContainer
      @displayBoundaries={{this.displayBoundaries}}
      @isSelected={{this.isSelected}}
    >
      {{!-- Sample block yield --}}
        <Boxel::Header
          @header="Card"
          @isSelected={{this.isSelected}}
          @selectionHeader={{true}}
        />
        <div>Card Here</div>
      {{!-- End of sample block yield --}}
    </Boxel::CardContainer>
  </:example>
  <:api as |Args|>
    <Args.Bool
      @name="displayBoundaries"
      @description="Displays card borders"
      @defaultValue={{false}}
      @value={{this.displayBoundaries}}
      @onInput={{fn (mut this.displayBoundaries)}}
    />
    <Args.Bool
      @name="isSelected"
      @description="Highlights card borders"
      @defaultValue={{false}}
      @value={{this.isSelected}}
      @onInput={{fn (mut this.isSelected)}}
    />
    <Args.Yield
      @description="Unstyled area for custom card content and fields"
    />
  </:api>
</Freestyle::Usage>

<Freestyle::Usage @slug="CardContainer-gridNote" @description="Suggestion to use CSS Grid">
  <:example>
    <Boxel::CardContainer @displayBoundaries={{true}}>
      <div style="display:grid; grid-template-rows: 5rem;">
        <div style="margin: auto">
          One strategy to consider is using a root element with `display: grid` to layout the contents of your card.  
        </div>
      </div>
    </Boxel::CardContainer>
  </:example>
</Freestyle::Usage>